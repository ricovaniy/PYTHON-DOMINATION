class Python{
    field int x;
    field int y;
    field int direction;
    field int prevDirection;
    field int length;
    field int size;
    field Queue elements;
    constructor Python new (int x1, int y1, int Asize){
        let x = x1; // Set start X
        let y = y1; // Set start Y
        let direction = 132; // Set start direction (RIGHT)
        let prevDirection = 0;
        let length = 1; // Set start length
        let size = Asize; // Set size of blocks
        let elements = Queue.new(x,y); // Initialize body
        do DrawSegment(true, x, y);
        return this;
    }

    method void DrawSegment(boolean color, int x, int y){ // Draw segment of body with a rectangle
        do Screen.setColor(color);
        do Screen.drawRectangle(x, y, x + size -1, y + size -1);
        return;
    }

    method void DecrementLength(){ // Decreasing body length
        let length = length - 1;
        return;
    }

    method void incrementLength(){ // Increasing body length
        let length = length + 1;
        return;
    }
    
    method void SetDirection(int dir){ // Setter for direction
        let direction = dir;
        return;
    }

    method void Draw(){ // Draws each body element
        var LinkedList tail;
        do elements.Enqueue(x,y);
        while(length<elements.GetSize()){
            let tail = elements.Dequeue();
            do DrawSegment(false, tail.GetX(), tail.GetY());
        }
        do DrawSegment(true, x, y);
        return;
    }

    method boolean EatFood(Food f){ // Collision detection with food
        return (~(x<(f.GetX()-16)) & ~(x>f.GetX())) & (~(y<(f.GetY()-16)) & ~(y>f.GetY()));
    }

    method boolean Crashed(){ // Collision detection with map borders
        return ((x < 0) | (x > 509) | (y < 16) | (y > 238) | (elements.Contain(x,y)));
    }
    
    method void Move(){ // Move.
        if (direction = 130) {
            if (~(prevDirection = 132) | (length = 1)){
                let x = x - size;
                let prevDirection = 130;
            }
            else {let x = x + size;}
        } // move LEFT
        if (direction = 131) {
            if (~(prevDirection = 133) | (length = 1)){
                let y = y - size;
                let prevDirection = 131;
            }
            else {let y = y + size;}
        } // move DOWN
        if (direction = 132) {
            if (~(prevDirection = 130) | (length = 1)){
                let x = x + size;
                let prevDirection = 132;
            }
            else { let x = x - size;}
        } // move RIGHT
        if (direction = 133) {
            if (~(prevDirection = 131) | (length = 1)){
                let y = y + size;
                let prevDirection = 133;
            }
            else {let y = y - size;}
        } // move UP
        return;
    }

    method void dispose(){
        do elements.dispose();
        do Memory.deAlloc(this);
        return;
    }
}